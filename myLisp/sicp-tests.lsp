;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Structure & Interpretation of Computer Programs ;;

(assert (= 486 486) "number")
(assert (= (+ 137 349) 486) "addition")
(assert (= (- 1000 334) 666) "subtraction")
(assert (= (* 5 99) 495) "multiplication")
(assert (= (/ 10 5) 2) "division")
(assert (= (+ 27/10 10) 127/10) "fractional addition")
(assert (= (+ 21 35 12 7) 75) "multiple addition")
(assert (= (* 25 4 12) 1200) "multiple multiplication")
(assert (= (+ (* 3 5) (- 10 6)) 19) "nesting")
(assert (= (+ (* 3 (+ (* 2 4) (+ 3 5))) (+ (- 10 7) 6)) 57) "complex nesting")

((fn ()
    (def "size" 2)
    (assert (= size 2) "define not working")
    (assert (= (* 5 size) 10) "multiply with define")

    (def "pi" 314159/100000)
    (def "radius" 10)
    (assert (= (* pi (* radius radius)) 314159/1000) "area")
    (def "circumference" (* 2 pi radius))
    (assert (= circumference 628318/10000) "circumference")
))
((fn ()
    (defn ("square" "x") (* x x))
    (assert (= (square 21) 441) "simple square")
    (assert (= (square (+ 2 5)) 49) "square of sum")
    (assert (= (square (square 3)) 81 ) "square of square")
    (defn ("sum-of-squares" "x" "y") (+ (square x) (square y)))
    (assert (= (sum-of-squares 3 4) 25) "sum of squares")
    (defn ("f" "a") (sum-of-squares (+ a 1) (* a 2)))
    (assert (= (f 5) 136) "special sum of squares")
))
((fn ()
    (defn ("a-plus-abs-b" "a" "b")
        ((if (< b 0) - +) a b)
    )
    (assert (= (a-plus-abs-b 2 3) 5) "positive a-plus-abs-b")
    (assert (= (a-plus-abs-b 2 -3) 5) "negative a-plus-abs-b")
))
((fn ()
    (defn ("cube" "x") (* x x x))
    (defn ("inc" "x") (+ 1 x))
    (defn ("sum" "term" "a" "next" "b")
        (if (> a b)
            0
            (+ (term a) (sum term (next a) next b))
        )
    )

    (defn ("sum-cubes" "a" "b") (sum cube a inc b))
    (assert (= (sum-cubes 1 10) 3025) "sum-cubes")

    (defn ("identity" "x") x)
    (defn ("sum-integers" "a" "b") (sum identity a inc b))
    (assert (= (sum-integers 1 10) 55) "sum-integers")
))
((fn ()
    (def "x" 5)
    (assert (=
        (+
            (let (("x" 3))
                (+ x (* x 10))
            )
            x
        )
        38
    ) "inner let")
))
((fn ()
    (def "x" 2)
    (assert (=
        (let (("x" 3) ("y" (+ x 2)))
            (* x y)
        )
        12
    ) "redefining let")
))
((fn ()
    (defn ("f" "g") (g 2))
    (defn ("square" "x") (* x x))
    (assert (= (f square) 4) "f square")
    (assert (= (f (fn ("z") (* z (+ 1 z)))) 6) "f lambda")
))
((fn ()
    (defn ("list-ref" "items" "n")
        (if (= n 0)
            (car items)
            (list-ref (cdr items) (- n 1))
        )
    )
    (def "squares" (list 1 4 9 16 25))
    (assert (= (list-ref squares 3) 16) "list-ref")
))
